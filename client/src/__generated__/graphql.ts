/* eslint-disable */
/* This file is autogenerated, see codegen.yml */

import gql from 'graphql-tag';
import * as VueApolloComposable from '@vue/apollo-composable';
import * as VueCompositionApi from 'vue';
import { FieldPolicy, FieldReadFunction, TypePolicies, TypePolicy } from '@apollo/client/cache';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type ReactiveFunction<TParam> = () => TParam;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type GqlAdminFoodEntryMetrics = {
  __typename?: 'AdminFoodEntryMetrics';
  /** The average number of calories added per user in the last 8-14 days (7 days before the last 7 days). */
  avgOfCaloriesPerUserLastWeek?: Maybe<Scalars['Float']>;
  /** The average number of calories added per user in the last 7 days */
  avgOfCaloriesPerUserThisWeek?: Maybe<Scalars['Float']>;
  /** Number of added entries in the last 8-14 days (7 days before the last 7 days). */
  numOfEntriesLastWeek?: Maybe<Scalars['Int']>;
  /** Number of added entries in the last 7 days. */
  numOfEntriesThisWeek?: Maybe<Scalars['Int']>;
};

/** Food entry metrics available to admin users */
export type GqlAdminMetrics = {
  __typename?: 'AdminMetrics';
  foodEntry?: Maybe<GqlAdminFoodEntryMetrics>;
};

export type GqlAdminMutation = {
  __typename?: 'AdminMutation';
  createFoodEntry?: Maybe<GqlFoodEntry>;
  deleteFoodEntry?: Maybe<GqlFoodEntry>;
  hello?: Maybe<Scalars['String']>;
  updateFoodEntry?: Maybe<GqlFoodEntry>;
};


export type GqlAdminMutationcreateFoodEntryArgs = {
  foodEntry: GqlFoodEntryCreateInput;
  userId: Scalars['String'];
};


export type GqlAdminMutationdeleteFoodEntryArgs = {
  foodEntryId: Scalars['String'];
  userId: Scalars['String'];
};


export type GqlAdminMutationupdateFoodEntryArgs = {
  foodEntry: GqlFoodEntryUpdateInput;
  userId: Scalars['String'];
};

export type GqlAdminQuery = {
  __typename?: 'AdminQuery';
  foodEntries: Array<GqlFoodEntry>;
  hello?: Maybe<Scalars['String']>;
  /** Metrics available to admin users */
  metrics?: Maybe<GqlAdminMetrics>;
};


export type GqlAdminQueryfoodEntriesArgs = {
  userId?: InputMaybe<Scalars['String']>;
};

export type GqlFoodEntry = {
  __typename?: 'FoodEntry';
  calories: Scalars['Int'];
  date: Scalars['String'];
  foodEntryId: Scalars['String'];
  name: Scalars['String'];
  price?: Maybe<Scalars['Int']>;
  user: GqlUser;
  userId: Scalars['String'];
};

export type GqlFoodEntryCreateInput = {
  calories: Scalars['Int'];
  date: Scalars['String'];
  name: Scalars['String'];
  price?: InputMaybe<Scalars['Int']>;
};

export type GqlFoodEntryUpdateInput = {
  calories?: InputMaybe<Scalars['Int']>;
  date?: InputMaybe<Scalars['String']>;
  foodEntryId: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['Int']>;
};

export type GqlMeMutation = {
  __typename?: 'MeMutation';
  createFoodEntry?: Maybe<GqlFoodEntry>;
  deleteFoodEntry?: Maybe<GqlFoodEntry>;
  hello?: Maybe<Scalars['String']>;
  updateFoodEntry?: Maybe<GqlFoodEntry>;
  updateUserSettings?: Maybe<GqlUserSettings>;
};


export type GqlMeMutationcreateFoodEntryArgs = {
  foodEntry: GqlFoodEntryCreateInput;
};


export type GqlMeMutationdeleteFoodEntryArgs = {
  foodEntryId: Scalars['String'];
};


export type GqlMeMutationupdateFoodEntryArgs = {
  foodEntry: GqlFoodEntryUpdateInput;
};


export type GqlMeMutationupdateUserSettingsArgs = {
  userSettings: GqlUserSettingsUpdateInput;
};

export type GqlMeQuery = {
  __typename?: 'MeQuery';
  foodEntries: Array<GqlFoodEntry>;
  hello?: Maybe<Scalars['String']>;
  user?: Maybe<GqlUser>;
};

export type GqlMutation = {
  __typename?: 'Mutation';
  /** Mutations available to authenticated admin user. */
  admin?: Maybe<GqlAdminMutation>;
  /** Mutations available to authenticated user. */
  me?: Maybe<GqlMeMutation>;
};

export type GqlQuery = {
  __typename?: 'Query';
  /** Queries available to authenticated admin user. */
  admin?: Maybe<GqlAdminQuery>;
  /** Queries available to authenticated user. */
  me?: Maybe<GqlMeQuery>;
};

export type GqlUser = {
  __typename?: 'User';
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  userId: Scalars['String'];
  userRoles: Array<GqlUserRoleType>;
  userSettings: GqlUserSettings;
};

export enum GqlUserRoleType {
  ADMIN = 'ADMIN'
}

export type GqlUserSettings = {
  __typename?: 'UserSettings';
  caloriesLimitDaily: Scalars['Int'];
  priceLimitMonthly: Scalars['Int'];
  userId: Scalars['String'];
};

export type GqlUserSettingsUpdateInput = {
  caloriesLimitDaily?: InputMaybe<Scalars['Int']>;
  priceLimitMonthly?: InputMaybe<Scalars['Int']>;
};

export type GqlMeFoodEntryFragment = { __typename?: 'FoodEntry', foodEntryId: string, name: string, date: string, calories: number, price?: number | null | undefined };

export type GqlAdminFoodEntryFragment = { __typename?: 'FoodEntry', foodEntryId: string, name: string, date: string, calories: number, price?: number | null | undefined, user: { __typename?: 'User', userId: string, firstName: string, lastName: string } };

export type GqlgetMeFoodEntriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlgetMeFoodEntriesQuery = { __typename?: 'Query', me?: { __typename?: 'MeQuery', foodEntries: Array<{ __typename?: 'FoodEntry', foodEntryId: string, name: string, date: string, calories: number, price?: number | null | undefined }> } | null | undefined };

export type GqlcreateMeFoodEntryMutationVariables = Exact<{
  foodEntry: GqlFoodEntryCreateInput;
}>;


export type GqlcreateMeFoodEntryMutation = { __typename?: 'Mutation', me?: { __typename?: 'MeMutation', createFoodEntry?: { __typename?: 'FoodEntry', foodEntryId: string, name: string, date: string, calories: number, price?: number | null | undefined } | null | undefined } | null | undefined };

export type GqlupdateMeFoodEntryMutationVariables = Exact<{
  foodEntry: GqlFoodEntryUpdateInput;
}>;


export type GqlupdateMeFoodEntryMutation = { __typename?: 'Mutation', me?: { __typename?: 'MeMutation', updateFoodEntry?: { __typename?: 'FoodEntry', foodEntryId: string, name: string, date: string, calories: number, price?: number | null | undefined } | null | undefined } | null | undefined };

export type GqldeleteMeFoodEntryMutationVariables = Exact<{
  foodEntryId: Scalars['String'];
}>;


export type GqldeleteMeFoodEntryMutation = { __typename?: 'Mutation', me?: { __typename?: 'MeMutation', deleteFoodEntry?: { __typename?: 'FoodEntry', foodEntryId: string } | null | undefined } | null | undefined };

export type GqlgetAdminFoodEntriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlgetAdminFoodEntriesQuery = { __typename?: 'Query', admin?: { __typename?: 'AdminQuery', foodEntries: Array<{ __typename?: 'FoodEntry', foodEntryId: string, name: string, date: string, calories: number, price?: number | null | undefined, user: { __typename?: 'User', userId: string, firstName: string, lastName: string } }> } | null | undefined };

export type GqlcreateAdminFoodEntryMutationVariables = Exact<{
  userId: Scalars['String'];
  foodEntry: GqlFoodEntryCreateInput;
}>;


export type GqlcreateAdminFoodEntryMutation = { __typename?: 'Mutation', admin?: { __typename?: 'AdminMutation', createFoodEntry?: { __typename?: 'FoodEntry', foodEntryId: string, name: string, date: string, calories: number, price?: number | null | undefined, user: { __typename?: 'User', userId: string, firstName: string, lastName: string } } | null | undefined } | null | undefined };

export type GqlupdateAdminFoodEntryMutationVariables = Exact<{
  userId: Scalars['String'];
  foodEntry: GqlFoodEntryUpdateInput;
}>;


export type GqlupdateAdminFoodEntryMutation = { __typename?: 'Mutation', admin?: { __typename?: 'AdminMutation', updateFoodEntry?: { __typename?: 'FoodEntry', foodEntryId: string, name: string, date: string, calories: number, price?: number | null | undefined, user: { __typename?: 'User', userId: string, firstName: string, lastName: string } } | null | undefined } | null | undefined };

export type GqldeleteAdminFoodEntryMutationVariables = Exact<{
  userId: Scalars['String'];
  foodEntryId: Scalars['String'];
}>;


export type GqldeleteAdminFoodEntryMutation = { __typename?: 'Mutation', admin?: { __typename?: 'AdminMutation', deleteFoodEntry?: { __typename?: 'FoodEntry', foodEntryId: string } | null | undefined } | null | undefined };

export type GqlgetAdminFoodEntryMetricsQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlgetAdminFoodEntryMetricsQuery = { __typename?: 'Query', admin?: { __typename?: 'AdminQuery', metrics?: { __typename?: 'AdminMetrics', foodEntry?: { __typename?: 'AdminFoodEntryMetrics', numOfEntriesThisWeek?: number | null | undefined, numOfEntriesLastWeek?: number | null | undefined, avgOfCaloriesPerUserThisWeek?: number | null | undefined, avgOfCaloriesPerUserLastWeek?: number | null | undefined } | null | undefined } | null | undefined } | null | undefined };

export type GqlMeUserFragment = { __typename?: 'User', userId: string, firstName: string, lastName: string, userRoles: Array<GqlUserRoleType> };

export type GqlgetMeUserQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlgetMeUserQuery = { __typename?: 'Query', me?: { __typename?: 'MeQuery', user?: { __typename?: 'User', userId: string, firstName: string, lastName: string, userRoles: Array<GqlUserRoleType> } | null | undefined } | null | undefined };

export type GqlMeUserSettingsFragment = { __typename?: 'UserSettings', userId: string, caloriesLimitDaily: number, priceLimitMonthly: number };

export type GqlgetMeUserSettingsQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlgetMeUserSettingsQuery = { __typename?: 'Query', me?: { __typename?: 'MeQuery', user?: { __typename?: 'User', userId: string, userSettings: { __typename?: 'UserSettings', userId: string, caloriesLimitDaily: number, priceLimitMonthly: number } } | null | undefined } | null | undefined };

export type GqlupdateMeUserSettingsMutationVariables = Exact<{
  userSettings: GqlUserSettingsUpdateInput;
}>;


export type GqlupdateMeUserSettingsMutation = { __typename?: 'Mutation', me?: { __typename?: 'MeMutation', updateUserSettings?: { __typename?: 'UserSettings', userId: string, caloriesLimitDaily: number, priceLimitMonthly: number } | null | undefined } | null | undefined };

export const MeFoodEntryFragmentDoc = gql`
    fragment MeFoodEntry on FoodEntry {
  foodEntryId
  name
  date
  calories
  price
}
    `;
export const AdminFoodEntryFragmentDoc = gql`
    fragment AdminFoodEntry on FoodEntry {
  foodEntryId
  name
  date
  calories
  price
  user {
    userId
    firstName
    lastName
  }
}
    `;
export const MeUserFragmentDoc = gql`
    fragment MeUser on User {
  userId
  firstName
  lastName
  userRoles
}
    `;
export const MeUserSettingsFragmentDoc = gql`
    fragment MeUserSettings on UserSettings {
  userId
  caloriesLimitDaily
  priceLimitMonthly
}
    `;
export const getMeFoodEntriesDocument = gql`
    query getMeFoodEntries {
  me {
    foodEntries {
      ...MeFoodEntry
    }
  }
}
    ${MeFoodEntryFragmentDoc}`;

/**
 * __usegetMeFoodEntriesQuery__
 *
 * To run a query within a Vue component, call `usegetMeFoodEntriesQuery` and pass it any options that fit your needs.
 * When your component renders, `usegetMeFoodEntriesQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = usegetMeFoodEntriesQuery();
 */
export function usegetMeFoodEntriesQuery(options: VueApolloComposable.UseQueryOptions<GqlgetMeFoodEntriesQuery, GqlgetMeFoodEntriesQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GqlgetMeFoodEntriesQuery, GqlgetMeFoodEntriesQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GqlgetMeFoodEntriesQuery, GqlgetMeFoodEntriesQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<GqlgetMeFoodEntriesQuery, GqlgetMeFoodEntriesQueryVariables>(getMeFoodEntriesDocument, {}, options);
}
export type getMeFoodEntriesQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GqlgetMeFoodEntriesQuery, GqlgetMeFoodEntriesQueryVariables>;
export const createMeFoodEntryDocument = gql`
    mutation createMeFoodEntry($foodEntry: FoodEntryCreateInput!) {
  me {
    createFoodEntry(foodEntry: $foodEntry) {
      ...MeFoodEntry
    }
  }
}
    ${MeFoodEntryFragmentDoc}`;

/**
 * __usecreateMeFoodEntryMutation__
 *
 * To run a mutation, you first call `usecreateMeFoodEntryMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `usecreateMeFoodEntryMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = usecreateMeFoodEntryMutation({
 *   variables: {
 *     foodEntry: // value for 'foodEntry'
 *   },
 * });
 */
export function usecreateMeFoodEntryMutation(options: VueApolloComposable.UseMutationOptions<GqlcreateMeFoodEntryMutation, GqlcreateMeFoodEntryMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<GqlcreateMeFoodEntryMutation, GqlcreateMeFoodEntryMutationVariables>>) {
  return VueApolloComposable.useMutation<GqlcreateMeFoodEntryMutation, GqlcreateMeFoodEntryMutationVariables>(createMeFoodEntryDocument, options);
}
export type createMeFoodEntryMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<GqlcreateMeFoodEntryMutation, GqlcreateMeFoodEntryMutationVariables>;
export const updateMeFoodEntryDocument = gql`
    mutation updateMeFoodEntry($foodEntry: FoodEntryUpdateInput!) {
  me {
    updateFoodEntry(foodEntry: $foodEntry) {
      ...MeFoodEntry
    }
  }
}
    ${MeFoodEntryFragmentDoc}`;

/**
 * __useupdateMeFoodEntryMutation__
 *
 * To run a mutation, you first call `useupdateMeFoodEntryMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useupdateMeFoodEntryMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useupdateMeFoodEntryMutation({
 *   variables: {
 *     foodEntry: // value for 'foodEntry'
 *   },
 * });
 */
export function useupdateMeFoodEntryMutation(options: VueApolloComposable.UseMutationOptions<GqlupdateMeFoodEntryMutation, GqlupdateMeFoodEntryMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<GqlupdateMeFoodEntryMutation, GqlupdateMeFoodEntryMutationVariables>>) {
  return VueApolloComposable.useMutation<GqlupdateMeFoodEntryMutation, GqlupdateMeFoodEntryMutationVariables>(updateMeFoodEntryDocument, options);
}
export type updateMeFoodEntryMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<GqlupdateMeFoodEntryMutation, GqlupdateMeFoodEntryMutationVariables>;
export const deleteMeFoodEntryDocument = gql`
    mutation deleteMeFoodEntry($foodEntryId: String!) {
  me {
    deleteFoodEntry(foodEntryId: $foodEntryId) {
      foodEntryId
    }
  }
}
    `;

/**
 * __usedeleteMeFoodEntryMutation__
 *
 * To run a mutation, you first call `usedeleteMeFoodEntryMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `usedeleteMeFoodEntryMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = usedeleteMeFoodEntryMutation({
 *   variables: {
 *     foodEntryId: // value for 'foodEntryId'
 *   },
 * });
 */
export function usedeleteMeFoodEntryMutation(options: VueApolloComposable.UseMutationOptions<GqldeleteMeFoodEntryMutation, GqldeleteMeFoodEntryMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<GqldeleteMeFoodEntryMutation, GqldeleteMeFoodEntryMutationVariables>>) {
  return VueApolloComposable.useMutation<GqldeleteMeFoodEntryMutation, GqldeleteMeFoodEntryMutationVariables>(deleteMeFoodEntryDocument, options);
}
export type deleteMeFoodEntryMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<GqldeleteMeFoodEntryMutation, GqldeleteMeFoodEntryMutationVariables>;
export const getAdminFoodEntriesDocument = gql`
    query getAdminFoodEntries {
  admin {
    foodEntries {
      ...AdminFoodEntry
    }
  }
}
    ${AdminFoodEntryFragmentDoc}`;

/**
 * __usegetAdminFoodEntriesQuery__
 *
 * To run a query within a Vue component, call `usegetAdminFoodEntriesQuery` and pass it any options that fit your needs.
 * When your component renders, `usegetAdminFoodEntriesQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = usegetAdminFoodEntriesQuery();
 */
export function usegetAdminFoodEntriesQuery(options: VueApolloComposable.UseQueryOptions<GqlgetAdminFoodEntriesQuery, GqlgetAdminFoodEntriesQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GqlgetAdminFoodEntriesQuery, GqlgetAdminFoodEntriesQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GqlgetAdminFoodEntriesQuery, GqlgetAdminFoodEntriesQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<GqlgetAdminFoodEntriesQuery, GqlgetAdminFoodEntriesQueryVariables>(getAdminFoodEntriesDocument, {}, options);
}
export type getAdminFoodEntriesQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GqlgetAdminFoodEntriesQuery, GqlgetAdminFoodEntriesQueryVariables>;
export const createAdminFoodEntryDocument = gql`
    mutation createAdminFoodEntry($userId: String!, $foodEntry: FoodEntryCreateInput!) {
  admin {
    createFoodEntry(userId: $userId, foodEntry: $foodEntry) {
      ...AdminFoodEntry
    }
  }
}
    ${AdminFoodEntryFragmentDoc}`;

/**
 * __usecreateAdminFoodEntryMutation__
 *
 * To run a mutation, you first call `usecreateAdminFoodEntryMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `usecreateAdminFoodEntryMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = usecreateAdminFoodEntryMutation({
 *   variables: {
 *     userId: // value for 'userId'
 *     foodEntry: // value for 'foodEntry'
 *   },
 * });
 */
export function usecreateAdminFoodEntryMutation(options: VueApolloComposable.UseMutationOptions<GqlcreateAdminFoodEntryMutation, GqlcreateAdminFoodEntryMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<GqlcreateAdminFoodEntryMutation, GqlcreateAdminFoodEntryMutationVariables>>) {
  return VueApolloComposable.useMutation<GqlcreateAdminFoodEntryMutation, GqlcreateAdminFoodEntryMutationVariables>(createAdminFoodEntryDocument, options);
}
export type createAdminFoodEntryMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<GqlcreateAdminFoodEntryMutation, GqlcreateAdminFoodEntryMutationVariables>;
export const updateAdminFoodEntryDocument = gql`
    mutation updateAdminFoodEntry($userId: String!, $foodEntry: FoodEntryUpdateInput!) {
  admin {
    updateFoodEntry(userId: $userId, foodEntry: $foodEntry) {
      ...AdminFoodEntry
    }
  }
}
    ${AdminFoodEntryFragmentDoc}`;

/**
 * __useupdateAdminFoodEntryMutation__
 *
 * To run a mutation, you first call `useupdateAdminFoodEntryMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useupdateAdminFoodEntryMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useupdateAdminFoodEntryMutation({
 *   variables: {
 *     userId: // value for 'userId'
 *     foodEntry: // value for 'foodEntry'
 *   },
 * });
 */
export function useupdateAdminFoodEntryMutation(options: VueApolloComposable.UseMutationOptions<GqlupdateAdminFoodEntryMutation, GqlupdateAdminFoodEntryMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<GqlupdateAdminFoodEntryMutation, GqlupdateAdminFoodEntryMutationVariables>>) {
  return VueApolloComposable.useMutation<GqlupdateAdminFoodEntryMutation, GqlupdateAdminFoodEntryMutationVariables>(updateAdminFoodEntryDocument, options);
}
export type updateAdminFoodEntryMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<GqlupdateAdminFoodEntryMutation, GqlupdateAdminFoodEntryMutationVariables>;
export const deleteAdminFoodEntryDocument = gql`
    mutation deleteAdminFoodEntry($userId: String!, $foodEntryId: String!) {
  admin {
    deleteFoodEntry(userId: $userId, foodEntryId: $foodEntryId) {
      foodEntryId
    }
  }
}
    `;

/**
 * __usedeleteAdminFoodEntryMutation__
 *
 * To run a mutation, you first call `usedeleteAdminFoodEntryMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `usedeleteAdminFoodEntryMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = usedeleteAdminFoodEntryMutation({
 *   variables: {
 *     userId: // value for 'userId'
 *     foodEntryId: // value for 'foodEntryId'
 *   },
 * });
 */
export function usedeleteAdminFoodEntryMutation(options: VueApolloComposable.UseMutationOptions<GqldeleteAdminFoodEntryMutation, GqldeleteAdminFoodEntryMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<GqldeleteAdminFoodEntryMutation, GqldeleteAdminFoodEntryMutationVariables>>) {
  return VueApolloComposable.useMutation<GqldeleteAdminFoodEntryMutation, GqldeleteAdminFoodEntryMutationVariables>(deleteAdminFoodEntryDocument, options);
}
export type deleteAdminFoodEntryMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<GqldeleteAdminFoodEntryMutation, GqldeleteAdminFoodEntryMutationVariables>;
export const getAdminFoodEntryMetricsDocument = gql`
    query getAdminFoodEntryMetrics {
  admin {
    metrics {
      foodEntry {
        numOfEntriesThisWeek
        numOfEntriesLastWeek
        avgOfCaloriesPerUserThisWeek
        avgOfCaloriesPerUserLastWeek
      }
    }
  }
}
    `;

/**
 * __usegetAdminFoodEntryMetricsQuery__
 *
 * To run a query within a Vue component, call `usegetAdminFoodEntryMetricsQuery` and pass it any options that fit your needs.
 * When your component renders, `usegetAdminFoodEntryMetricsQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = usegetAdminFoodEntryMetricsQuery();
 */
export function usegetAdminFoodEntryMetricsQuery(options: VueApolloComposable.UseQueryOptions<GqlgetAdminFoodEntryMetricsQuery, GqlgetAdminFoodEntryMetricsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GqlgetAdminFoodEntryMetricsQuery, GqlgetAdminFoodEntryMetricsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GqlgetAdminFoodEntryMetricsQuery, GqlgetAdminFoodEntryMetricsQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<GqlgetAdminFoodEntryMetricsQuery, GqlgetAdminFoodEntryMetricsQueryVariables>(getAdminFoodEntryMetricsDocument, {}, options);
}
export type getAdminFoodEntryMetricsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GqlgetAdminFoodEntryMetricsQuery, GqlgetAdminFoodEntryMetricsQueryVariables>;
export const getMeUserDocument = gql`
    query getMeUser {
  me {
    user {
      ...MeUser
    }
  }
}
    ${MeUserFragmentDoc}`;

/**
 * __usegetMeUserQuery__
 *
 * To run a query within a Vue component, call `usegetMeUserQuery` and pass it any options that fit your needs.
 * When your component renders, `usegetMeUserQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = usegetMeUserQuery();
 */
export function usegetMeUserQuery(options: VueApolloComposable.UseQueryOptions<GqlgetMeUserQuery, GqlgetMeUserQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GqlgetMeUserQuery, GqlgetMeUserQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GqlgetMeUserQuery, GqlgetMeUserQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<GqlgetMeUserQuery, GqlgetMeUserQueryVariables>(getMeUserDocument, {}, options);
}
export type getMeUserQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GqlgetMeUserQuery, GqlgetMeUserQueryVariables>;
export const getMeUserSettingsDocument = gql`
    query getMeUserSettings {
  me {
    user {
      userId
      userSettings {
        ...MeUserSettings
      }
    }
  }
}
    ${MeUserSettingsFragmentDoc}`;

/**
 * __usegetMeUserSettingsQuery__
 *
 * To run a query within a Vue component, call `usegetMeUserSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `usegetMeUserSettingsQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = usegetMeUserSettingsQuery();
 */
export function usegetMeUserSettingsQuery(options: VueApolloComposable.UseQueryOptions<GqlgetMeUserSettingsQuery, GqlgetMeUserSettingsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GqlgetMeUserSettingsQuery, GqlgetMeUserSettingsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GqlgetMeUserSettingsQuery, GqlgetMeUserSettingsQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<GqlgetMeUserSettingsQuery, GqlgetMeUserSettingsQueryVariables>(getMeUserSettingsDocument, {}, options);
}
export type getMeUserSettingsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GqlgetMeUserSettingsQuery, GqlgetMeUserSettingsQueryVariables>;
export const updateMeUserSettingsDocument = gql`
    mutation updateMeUserSettings($userSettings: UserSettingsUpdateInput!) {
  me {
    updateUserSettings(userSettings: $userSettings) {
      ...MeUserSettings
    }
  }
}
    ${MeUserSettingsFragmentDoc}`;

/**
 * __useupdateMeUserSettingsMutation__
 *
 * To run a mutation, you first call `useupdateMeUserSettingsMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useupdateMeUserSettingsMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useupdateMeUserSettingsMutation({
 *   variables: {
 *     userSettings: // value for 'userSettings'
 *   },
 * });
 */
export function useupdateMeUserSettingsMutation(options: VueApolloComposable.UseMutationOptions<GqlupdateMeUserSettingsMutation, GqlupdateMeUserSettingsMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<GqlupdateMeUserSettingsMutation, GqlupdateMeUserSettingsMutationVariables>>) {
  return VueApolloComposable.useMutation<GqlupdateMeUserSettingsMutation, GqlupdateMeUserSettingsMutationVariables>(updateMeUserSettingsDocument, options);
}
export type updateMeUserSettingsMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<GqlupdateMeUserSettingsMutation, GqlupdateMeUserSettingsMutationVariables>;
export const namedOperations = {
  Query: {
    getMeFoodEntries: 'getMeFoodEntries',
    getAdminFoodEntries: 'getAdminFoodEntries',
    getAdminFoodEntryMetrics: 'getAdminFoodEntryMetrics',
    getMeUser: 'getMeUser',
    getMeUserSettings: 'getMeUserSettings'
  },
  Mutation: {
    createMeFoodEntry: 'createMeFoodEntry',
    updateMeFoodEntry: 'updateMeFoodEntry',
    deleteMeFoodEntry: 'deleteMeFoodEntry',
    createAdminFoodEntry: 'createAdminFoodEntry',
    updateAdminFoodEntry: 'updateAdminFoodEntry',
    deleteAdminFoodEntry: 'deleteAdminFoodEntry',
    updateMeUserSettings: 'updateMeUserSettings'
  },
  Fragment: {
    MeFoodEntry: 'MeFoodEntry',
    AdminFoodEntry: 'AdminFoodEntry',
    MeUser: 'MeUser',
    MeUserSettings: 'MeUserSettings'
  }
}
export type AdminFoodEntryMetricsKeySpecifier = ('avgOfCaloriesPerUserLastWeek' | 'avgOfCaloriesPerUserThisWeek' | 'numOfEntriesLastWeek' | 'numOfEntriesThisWeek' | AdminFoodEntryMetricsKeySpecifier)[];
export type AdminFoodEntryMetricsFieldPolicy = {
	avgOfCaloriesPerUserLastWeek?: FieldPolicy<any> | FieldReadFunction<any>,
	avgOfCaloriesPerUserThisWeek?: FieldPolicy<any> | FieldReadFunction<any>,
	numOfEntriesLastWeek?: FieldPolicy<any> | FieldReadFunction<any>,
	numOfEntriesThisWeek?: FieldPolicy<any> | FieldReadFunction<any>
};
export type AdminMetricsKeySpecifier = ('foodEntry' | AdminMetricsKeySpecifier)[];
export type AdminMetricsFieldPolicy = {
	foodEntry?: FieldPolicy<any> | FieldReadFunction<any>
};
export type AdminMutationKeySpecifier = ('createFoodEntry' | 'deleteFoodEntry' | 'hello' | 'updateFoodEntry' | AdminMutationKeySpecifier)[];
export type AdminMutationFieldPolicy = {
	createFoodEntry?: FieldPolicy<any> | FieldReadFunction<any>,
	deleteFoodEntry?: FieldPolicy<any> | FieldReadFunction<any>,
	hello?: FieldPolicy<any> | FieldReadFunction<any>,
	updateFoodEntry?: FieldPolicy<any> | FieldReadFunction<any>
};
export type AdminQueryKeySpecifier = ('foodEntries' | 'hello' | 'metrics' | AdminQueryKeySpecifier)[];
export type AdminQueryFieldPolicy = {
	foodEntries?: FieldPolicy<any> | FieldReadFunction<any>,
	hello?: FieldPolicy<any> | FieldReadFunction<any>,
	metrics?: FieldPolicy<any> | FieldReadFunction<any>
};
export type FoodEntryKeySpecifier = ('calories' | 'date' | 'foodEntryId' | 'name' | 'price' | 'user' | 'userId' | FoodEntryKeySpecifier)[];
export type FoodEntryFieldPolicy = {
	calories?: FieldPolicy<any> | FieldReadFunction<any>,
	date?: FieldPolicy<any> | FieldReadFunction<any>,
	foodEntryId?: FieldPolicy<any> | FieldReadFunction<any>,
	name?: FieldPolicy<any> | FieldReadFunction<any>,
	price?: FieldPolicy<any> | FieldReadFunction<any>,
	user?: FieldPolicy<any> | FieldReadFunction<any>,
	userId?: FieldPolicy<any> | FieldReadFunction<any>
};
export type MeMutationKeySpecifier = ('createFoodEntry' | 'deleteFoodEntry' | 'hello' | 'updateFoodEntry' | 'updateUserSettings' | MeMutationKeySpecifier)[];
export type MeMutationFieldPolicy = {
	createFoodEntry?: FieldPolicy<any> | FieldReadFunction<any>,
	deleteFoodEntry?: FieldPolicy<any> | FieldReadFunction<any>,
	hello?: FieldPolicy<any> | FieldReadFunction<any>,
	updateFoodEntry?: FieldPolicy<any> | FieldReadFunction<any>,
	updateUserSettings?: FieldPolicy<any> | FieldReadFunction<any>
};
export type MeQueryKeySpecifier = ('foodEntries' | 'hello' | 'user' | MeQueryKeySpecifier)[];
export type MeQueryFieldPolicy = {
	foodEntries?: FieldPolicy<any> | FieldReadFunction<any>,
	hello?: FieldPolicy<any> | FieldReadFunction<any>,
	user?: FieldPolicy<any> | FieldReadFunction<any>
};
export type MutationKeySpecifier = ('admin' | 'me' | MutationKeySpecifier)[];
export type MutationFieldPolicy = {
	admin?: FieldPolicy<any> | FieldReadFunction<any>,
	me?: FieldPolicy<any> | FieldReadFunction<any>
};
export type QueryKeySpecifier = ('admin' | 'me' | QueryKeySpecifier)[];
export type QueryFieldPolicy = {
	admin?: FieldPolicy<any> | FieldReadFunction<any>,
	me?: FieldPolicy<any> | FieldReadFunction<any>
};
export type UserKeySpecifier = ('email' | 'firstName' | 'lastName' | 'userId' | 'userRoles' | 'userSettings' | UserKeySpecifier)[];
export type UserFieldPolicy = {
	email?: FieldPolicy<any> | FieldReadFunction<any>,
	firstName?: FieldPolicy<any> | FieldReadFunction<any>,
	lastName?: FieldPolicy<any> | FieldReadFunction<any>,
	userId?: FieldPolicy<any> | FieldReadFunction<any>,
	userRoles?: FieldPolicy<any> | FieldReadFunction<any>,
	userSettings?: FieldPolicy<any> | FieldReadFunction<any>
};
export type UserSettingsKeySpecifier = ('caloriesLimitDaily' | 'priceLimitMonthly' | 'userId' | UserSettingsKeySpecifier)[];
export type UserSettingsFieldPolicy = {
	caloriesLimitDaily?: FieldPolicy<any> | FieldReadFunction<any>,
	priceLimitMonthly?: FieldPolicy<any> | FieldReadFunction<any>,
	userId?: FieldPolicy<any> | FieldReadFunction<any>
};
export type StrictTypedTypePolicies = {
	AdminFoodEntryMetrics?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | AdminFoodEntryMetricsKeySpecifier | (() => undefined | AdminFoodEntryMetricsKeySpecifier),
		fields?: AdminFoodEntryMetricsFieldPolicy,
	},
	AdminMetrics?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | AdminMetricsKeySpecifier | (() => undefined | AdminMetricsKeySpecifier),
		fields?: AdminMetricsFieldPolicy,
	},
	AdminMutation?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | AdminMutationKeySpecifier | (() => undefined | AdminMutationKeySpecifier),
		fields?: AdminMutationFieldPolicy,
	},
	AdminQuery?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | AdminQueryKeySpecifier | (() => undefined | AdminQueryKeySpecifier),
		fields?: AdminQueryFieldPolicy,
	},
	FoodEntry?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | FoodEntryKeySpecifier | (() => undefined | FoodEntryKeySpecifier),
		fields?: FoodEntryFieldPolicy,
	},
	MeMutation?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | MeMutationKeySpecifier | (() => undefined | MeMutationKeySpecifier),
		fields?: MeMutationFieldPolicy,
	},
	MeQuery?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | MeQueryKeySpecifier | (() => undefined | MeQueryKeySpecifier),
		fields?: MeQueryFieldPolicy,
	},
	Mutation?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | MutationKeySpecifier | (() => undefined | MutationKeySpecifier),
		fields?: MutationFieldPolicy,
	},
	Query?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | QueryKeySpecifier | (() => undefined | QueryKeySpecifier),
		fields?: QueryFieldPolicy,
	},
	User?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | UserKeySpecifier | (() => undefined | UserKeySpecifier),
		fields?: UserFieldPolicy,
	},
	UserSettings?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | UserSettingsKeySpecifier | (() => undefined | UserSettingsKeySpecifier),
		fields?: UserSettingsFieldPolicy,
	}
};
export type TypedTypePolicies = StrictTypedTypePolicies & TypePolicies;
// Generated on 2022-01-30T21:06:11+00:00
