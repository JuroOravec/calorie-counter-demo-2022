/* eslint-disable */
/* This file is autogenerated, see codegen.yml */

import type { ResolverContext } from '@/apis/graphql/types';

import type { GraphQLResolveInfo } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type GqlAdminFoodEntryMetrics = {
  __typename?: 'AdminFoodEntryMetrics';
  /** The average number of calories added per user in the last 8-14 days (7 days before the last 7 days). */
  avgOfCaloriesPerUserLastWeek?: Maybe<Scalars['Float']>;
  /** The average number of calories added per user in the last 7 days */
  avgOfCaloriesPerUserThisWeek?: Maybe<Scalars['Float']>;
  /** Number of added entries in the last 8-14 days (7 days before the last 7 days). */
  numOfEntriesLastWeek?: Maybe<Scalars['Int']>;
  /** Number of added entries in the last 7 days. */
  numOfEntriesThisWeek?: Maybe<Scalars['Int']>;
};

/** Food entry metrics available to admin users */
export type GqlAdminMetrics = {
  __typename?: 'AdminMetrics';
  foodEntry?: Maybe<GqlAdminFoodEntryMetrics>;
};

export type GqlAdminMutation = {
  __typename?: 'AdminMutation';
  createFoodEntry?: Maybe<GqlFoodEntry>;
  deleteFoodEntry?: Maybe<GqlFoodEntry>;
  hello?: Maybe<Scalars['String']>;
  updateFoodEntry?: Maybe<GqlFoodEntry>;
};


export type GqlAdminMutationCreateFoodEntryArgs = {
  foodEntry: GqlFoodEntryCreateInput;
  userId: Scalars['String'];
};


export type GqlAdminMutationDeleteFoodEntryArgs = {
  foodEntryId: Scalars['String'];
  userId: Scalars['String'];
};


export type GqlAdminMutationUpdateFoodEntryArgs = {
  foodEntry: GqlFoodEntryUpdateInput;
  userId: Scalars['String'];
};

export type GqlAdminQuery = {
  __typename?: 'AdminQuery';
  foodEntries: Array<GqlFoodEntry>;
  hello?: Maybe<Scalars['String']>;
  /** Metrics available to admin users */
  metrics?: Maybe<GqlAdminMetrics>;
};


export type GqlAdminQueryFoodEntriesArgs = {
  userId?: InputMaybe<Scalars['String']>;
};

export type GqlFoodEntry = {
  __typename?: 'FoodEntry';
  calories: Scalars['Int'];
  date: Scalars['String'];
  foodEntryId: Scalars['String'];
  name: Scalars['String'];
  price?: Maybe<Scalars['Int']>;
  user: GqlUser;
  userId: Scalars['String'];
};

export type GqlFoodEntryCreateInput = {
  calories: Scalars['Int'];
  date: Scalars['String'];
  name: Scalars['String'];
  price?: InputMaybe<Scalars['Int']>;
};

export type GqlFoodEntryUpdateInput = {
  calories?: InputMaybe<Scalars['Int']>;
  date?: InputMaybe<Scalars['String']>;
  foodEntryId: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['Int']>;
};

export type GqlMeMutation = {
  __typename?: 'MeMutation';
  createFoodEntry?: Maybe<GqlFoodEntry>;
  deleteFoodEntry?: Maybe<GqlFoodEntry>;
  hello?: Maybe<Scalars['String']>;
  updateFoodEntry?: Maybe<GqlFoodEntry>;
  updateUserSettings?: Maybe<GqlUserSettings>;
};


export type GqlMeMutationCreateFoodEntryArgs = {
  foodEntry: GqlFoodEntryCreateInput;
};


export type GqlMeMutationDeleteFoodEntryArgs = {
  foodEntryId: Scalars['String'];
};


export type GqlMeMutationUpdateFoodEntryArgs = {
  foodEntry: GqlFoodEntryUpdateInput;
};


export type GqlMeMutationUpdateUserSettingsArgs = {
  userSettings: GqlUserSettingsUpdateInput;
};

export type GqlMeQuery = {
  __typename?: 'MeQuery';
  foodEntries: Array<GqlFoodEntry>;
  hello?: Maybe<Scalars['String']>;
  user?: Maybe<GqlUser>;
};

export type GqlMutation = {
  __typename?: 'Mutation';
  /** Mutations available to authenticated admin user. */
  admin?: Maybe<GqlAdminMutation>;
  /** Mutations available to authenticated user. */
  me?: Maybe<GqlMeMutation>;
};

export type GqlQuery = {
  __typename?: 'Query';
  /** Queries available to authenticated admin user. */
  admin?: Maybe<GqlAdminQuery>;
  /** Queries available to authenticated user. */
  me?: Maybe<GqlMeQuery>;
};

export type GqlUser = {
  __typename?: 'User';
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  userId: Scalars['String'];
  userRoles: Array<GqlUserRoleType>;
  userSettings: GqlUserSettings;
};

export enum GqlUserRoleType {
  Admin = 'ADMIN'
}

export type GqlUserSettings = {
  __typename?: 'UserSettings';
  caloriesLimitDaily: Scalars['Int'];
  priceLimitMonthly: Scalars['Int'];
  userId: Scalars['String'];
};

export type GqlUserSettingsUpdateInput = {
  caloriesLimitDaily?: InputMaybe<Scalars['Int']>;
  priceLimitMonthly?: InputMaybe<Scalars['Int']>;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info?: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info?: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type GqlResolversTypes = {
  AdminFoodEntryMetrics: ResolverTypeWrapper<Partial<GqlAdminFoodEntryMetrics>>;
  AdminMetrics: ResolverTypeWrapper<Partial<GqlAdminMetrics>>;
  AdminMutation: ResolverTypeWrapper<Partial<GqlAdminMutation>>;
  AdminQuery: ResolverTypeWrapper<Partial<GqlAdminQuery>>;
  Boolean: ResolverTypeWrapper<Partial<Scalars['Boolean']>>;
  Float: ResolverTypeWrapper<Partial<Scalars['Float']>>;
  FoodEntry: ResolverTypeWrapper<Partial<GqlFoodEntry>>;
  FoodEntryCreateInput: ResolverTypeWrapper<Partial<GqlFoodEntryCreateInput>>;
  FoodEntryUpdateInput: ResolverTypeWrapper<Partial<GqlFoodEntryUpdateInput>>;
  Int: ResolverTypeWrapper<Partial<Scalars['Int']>>;
  MeMutation: ResolverTypeWrapper<Partial<GqlMeMutation>>;
  MeQuery: ResolverTypeWrapper<Partial<GqlMeQuery>>;
  Mutation: ResolverTypeWrapper<{}>;
  Query: ResolverTypeWrapper<{}>;
  String: ResolverTypeWrapper<Partial<Scalars['String']>>;
  User: ResolverTypeWrapper<Partial<GqlUser>>;
  UserRoleType: ResolverTypeWrapper<Partial<GqlUserRoleType>>;
  UserSettings: ResolverTypeWrapper<Partial<GqlUserSettings>>;
  UserSettingsUpdateInput: ResolverTypeWrapper<Partial<GqlUserSettingsUpdateInput>>;
};

/** Mapping between all available schema types and the resolvers parents */
export type GqlResolversParentTypes = {
  AdminFoodEntryMetrics: Partial<GqlAdminFoodEntryMetrics>;
  AdminMetrics: Partial<GqlAdminMetrics>;
  AdminMutation: Partial<GqlAdminMutation>;
  AdminQuery: Partial<GqlAdminQuery>;
  Boolean: Partial<Scalars['Boolean']>;
  Float: Partial<Scalars['Float']>;
  FoodEntry: Partial<GqlFoodEntry>;
  FoodEntryCreateInput: Partial<GqlFoodEntryCreateInput>;
  FoodEntryUpdateInput: Partial<GqlFoodEntryUpdateInput>;
  Int: Partial<Scalars['Int']>;
  MeMutation: Partial<GqlMeMutation>;
  MeQuery: Partial<GqlMeQuery>;
  Mutation: {};
  Query: {};
  String: Partial<Scalars['String']>;
  User: Partial<GqlUser>;
  UserSettings: Partial<GqlUserSettings>;
  UserSettingsUpdateInput: Partial<GqlUserSettingsUpdateInput>;
};

export type GqlAuthDirectiveArgs = {
  roles?: Maybe<Array<GqlUserRoleType>>;
};

export type GqlAuthDirectiveResolver<Result, Parent, ContextType = ResolverContext, Args = GqlAuthDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type GqlAdminFoodEntryMetricsResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['AdminFoodEntryMetrics'] = GqlResolversParentTypes['AdminFoodEntryMetrics']> = {
  avgOfCaloriesPerUserLastWeek?: Resolver<Maybe<GqlResolversTypes['Float']>, ParentType, ContextType>;
  avgOfCaloriesPerUserThisWeek?: Resolver<Maybe<GqlResolversTypes['Float']>, ParentType, ContextType>;
  numOfEntriesLastWeek?: Resolver<Maybe<GqlResolversTypes['Int']>, ParentType, ContextType>;
  numOfEntriesThisWeek?: Resolver<Maybe<GqlResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlAdminMetricsResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['AdminMetrics'] = GqlResolversParentTypes['AdminMetrics']> = {
  foodEntry?: Resolver<Maybe<GqlResolversTypes['AdminFoodEntryMetrics']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlAdminMutationResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['AdminMutation'] = GqlResolversParentTypes['AdminMutation']> = {
  createFoodEntry?: Resolver<Maybe<GqlResolversTypes['FoodEntry']>, ParentType, ContextType, RequireFields<GqlAdminMutationCreateFoodEntryArgs, 'foodEntry' | 'userId'>>;
  deleteFoodEntry?: Resolver<Maybe<GqlResolversTypes['FoodEntry']>, ParentType, ContextType, RequireFields<GqlAdminMutationDeleteFoodEntryArgs, 'foodEntryId' | 'userId'>>;
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  updateFoodEntry?: Resolver<Maybe<GqlResolversTypes['FoodEntry']>, ParentType, ContextType, RequireFields<GqlAdminMutationUpdateFoodEntryArgs, 'foodEntry' | 'userId'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlAdminQueryResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['AdminQuery'] = GqlResolversParentTypes['AdminQuery']> = {
  foodEntries?: Resolver<Array<GqlResolversTypes['FoodEntry']>, ParentType, ContextType, RequireFields<GqlAdminQueryFoodEntriesArgs, never>>;
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  metrics?: Resolver<Maybe<GqlResolversTypes['AdminMetrics']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlFoodEntryResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['FoodEntry'] = GqlResolversParentTypes['FoodEntry']> = {
  calories?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  date?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  foodEntryId?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  price?: Resolver<Maybe<GqlResolversTypes['Int']>, ParentType, ContextType>;
  user?: Resolver<GqlResolversTypes['User'], ParentType, ContextType>;
  userId?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlMeMutationResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['MeMutation'] = GqlResolversParentTypes['MeMutation']> = {
  createFoodEntry?: Resolver<Maybe<GqlResolversTypes['FoodEntry']>, ParentType, ContextType, RequireFields<GqlMeMutationCreateFoodEntryArgs, 'foodEntry'>>;
  deleteFoodEntry?: Resolver<Maybe<GqlResolversTypes['FoodEntry']>, ParentType, ContextType, RequireFields<GqlMeMutationDeleteFoodEntryArgs, 'foodEntryId'>>;
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  updateFoodEntry?: Resolver<Maybe<GqlResolversTypes['FoodEntry']>, ParentType, ContextType, RequireFields<GqlMeMutationUpdateFoodEntryArgs, 'foodEntry'>>;
  updateUserSettings?: Resolver<Maybe<GqlResolversTypes['UserSettings']>, ParentType, ContextType, RequireFields<GqlMeMutationUpdateUserSettingsArgs, 'userSettings'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlMeQueryResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['MeQuery'] = GqlResolversParentTypes['MeQuery']> = {
  foodEntries?: Resolver<Array<GqlResolversTypes['FoodEntry']>, ParentType, ContextType>;
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<Maybe<GqlResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlMutationResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['Mutation'] = GqlResolversParentTypes['Mutation']> = {
  admin?: Resolver<Maybe<GqlResolversTypes['AdminMutation']>, ParentType, ContextType>;
  me?: Resolver<Maybe<GqlResolversTypes['MeMutation']>, ParentType, ContextType>;
};

export type GqlQueryResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['Query'] = GqlResolversParentTypes['Query']> = {
  admin?: Resolver<Maybe<GqlResolversTypes['AdminQuery']>, ParentType, ContextType>;
  me?: Resolver<Maybe<GqlResolversTypes['MeQuery']>, ParentType, ContextType>;
};

export type GqlUserResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['User'] = GqlResolversParentTypes['User']> = {
  email?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  lastName?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  userId?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  userRoles?: Resolver<Array<GqlResolversTypes['UserRoleType']>, ParentType, ContextType>;
  userSettings?: Resolver<GqlResolversTypes['UserSettings'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlUserSettingsResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['UserSettings'] = GqlResolversParentTypes['UserSettings']> = {
  caloriesLimitDaily?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  priceLimitMonthly?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  userId?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlResolvers<ContextType = ResolverContext> = {
  AdminFoodEntryMetrics?: GqlAdminFoodEntryMetricsResolvers<ContextType>;
  AdminMetrics?: GqlAdminMetricsResolvers<ContextType>;
  AdminMutation?: GqlAdminMutationResolvers<ContextType>;
  AdminQuery?: GqlAdminQueryResolvers<ContextType>;
  FoodEntry?: GqlFoodEntryResolvers<ContextType>;
  MeMutation?: GqlMeMutationResolvers<ContextType>;
  MeQuery?: GqlMeQueryResolvers<ContextType>;
  Mutation?: GqlMutationResolvers<ContextType>;
  Query?: GqlQueryResolvers<ContextType>;
  User?: GqlUserResolvers<ContextType>;
  UserSettings?: GqlUserSettingsResolvers<ContextType>;
};

export type GqlDirectiveResolvers<ContextType = ResolverContext> = {
  auth?: GqlAuthDirectiveResolver<any, any, ContextType>;
};

// Generated on 2022-01-30T14:13:30+00:00
